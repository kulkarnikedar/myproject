{"version":3,"sources":["webpack:///./src/app/profiles/profiles.module.ts","webpack:///./src/app/profiles/profiles.page.html","webpack:///./src/app/profiles/profiles.page.scss","webpack:///./src/app/profiles/profiles.page.ts","webpack:///./src/app/service/profile.service.ts"],"names":[],"mappings":"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","file":"profiles-profiles-module~tabs-tabs-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { ProfilesPage } from './profiles.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProfilesPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ProfilesPage]\n})\nexport class ProfilesPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>profiles</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n    <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"loadData($event)\\\">\\n        <ion-refresher-content></ion-refresher-content>\\n      </ion-refresher>\\n  <form novalidate (ngSubmit)=\\\"profileUpdate()\\\" [formGroup]=\\\"profileform\\\">\\n    <ion-item>\\n      <ion-label   position=\\\"floating\\\">First Name </ion-label>\\n      <ion-input  readonly type=\\\"text\\\" formControlName=\\\"firstname\\\" name=\\\"firstname\\\" [class.error1]=\\\"!profileform.controls.firstname.valid && profileform.controls.firstname.dirty\\\"></ion-input>\\n    </ion-item>\\n    <ion-item no-lines *ngIf=\\\"( profileform.get('firstname').hasError('minlength') || profileform.get('firstname').hasError('maxlength') ||profileform.get('firstname').hasError('pattern') ||profileform.get('firstname').hasError('required') ) && profileform.get('firstname').touched\\\">\\n      <div class=\\\"error\\\" *ngIf=\\\"profileform.get('firstname').hasError('required') && profileform.get('firstname').touched\\\">\\n        Please input your first name\\n      </div>\\n      <div class=\\\"error\\\" *ngIf=\\\"profileform.get('firstname').hasError('minlength') && profileform.get('firstname').touched\\\">\\n        Minimum 4 characters\\n      </div>\\n      <div class=\\\"error\\\" *ngIf=\\\"profileform.get('firstname').hasError('maxlength') && profileform.get('firstname').touched\\\">\\n        Maximum 30 characters\\n      </div>\\n      <div class=\\\"error\\\" *ngIf=\\\"profileform.get('firstname').hasError('pattern') && profileform.get('firstname').touched\\\">\\n        Just use alphabet character\\n      </div>\\n    </ion-item>\\n\\n    <ion-item>\\n        <ion-label  position=\\\"floating\\\">Last Name </ion-label>\\n        <ion-input  readonly type=\\\"text\\\" formControlName=\\\"lastname\\\" [class.error1]=\\\"!profileform.controls.lastname.valid && profileform.controls.lastname.dirty\\\"></ion-input>\\n      </ion-item>\\n      <ion-item no-lines *ngIf=\\\"( profileform.get('lastname').hasError('minlength') || profileform.get('lastname').hasError('maxlength') ||profileform.get('lastname').hasError('pattern') ||profileform.get('lastname').hasError('required') ) && profileform.get('lastname').touched\\\">\\n        <div class=\\\"error\\\" *ngIf=\\\"profileform.get('lastname').hasError('required') && profileform.get('lastname').touched\\\">\\n          Please input your last name\\n        </div>\\n        <div class=\\\"error\\\" *ngIf=\\\"profileform.get('lastname').hasError('minlength') && profileform.get('lastname').touched\\\">\\n          Minimum 4 characters\\n        </div>\\n        <div class=\\\"error\\\" *ngIf=\\\"profileform.get('lastname').hasError('maxlength') && profileform.get('lastname').touched\\\">\\n          Maximum 30 characters\\n        </div>\\n        <div class=\\\"error\\\" *ngIf=\\\"profileform.get('lastname').hasError('pattern') && profileform.get('lastname').touched\\\">\\n          Just use alphabet character\\n        </div>\\n      </ion-item>\\n\\n      <ion-item>\\n        <ion-label  position=\\\"floating\\\">Email</ion-label>\\n        <ion-input readonly type=\\\"text\\\" formControlName=\\\"email\\\" [class.error1]=\\\"!profileform.controls.email.valid && profileform.controls.email.dirty\\\"></ion-input>\\n      </ion-item>\\n      <ion-item no-lines *ngIf=\\\"( profileform.get('email').hasError('minlength') || profileform.get('email').hasError('pattern') ||profileform.get('email').hasError('required') ) && profileform.get('email').touched\\\">\\n        <div class=\\\"error\\\" *ngIf=\\\"profileform.get('email').hasError('required') && profileform.get('email').touched\\\">\\n          Please input your email\\n        </div>\\n        <div class=\\\"error\\\" *ngIf=\\\"profileform.get('email').hasError('pattern') && profileform.get('email').touched\\\">\\n          Email address invalid\\n        </div>\\n      </ion-item>\\n\\n    <ion-item>\\n      <ion-label  position=\\\"floating\\\">Username</ion-label>\\n      <ion-input  readonly type=\\\"text\\\" name=\\\"username\\\" formControlName=\\\"username\\\" [class.error1]=\\\"!profileform.controls.username.valid && profileform.controls.username.dirty\\\"></ion-input>\\n    </ion-item>\\n\\n    <ion-item no-lines *ngIf=\\\"( profileform.get('username').hasError('minlength') || profileform.get('username').hasError('maxlength') ||profileform.get('username').hasError('pattern') ||profileform.get('username').hasError('required') ) && profileform.get('username').touched\\\">\\n      <div class=\\\"error\\\" *ngIf=\\\"profileform.get('username').hasError('required') && profileform.get('username').touched\\\">\\n        Please input your username\\n      </div>\\n      <div class=\\\"error\\\" *ngIf=\\\"profileform.get('username').hasError('minlength') && profileform.get('username').touched\\\">\\n        Minimum 4 characters\\n      </div>\\n      <div class=\\\"error\\\" *ngIf=\\\"profileform.get('username').hasError('maxlength') && profileform.get('username').touched\\\">\\n        Maximum 10 characters\\n      </div>\\n      <div class=\\\"error\\\" *ngIf=\\\"profileform.get('username').hasError('pattern') && profileform.get('username').touched\\\">\\n        Just use alphabet character\\n      </div>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label  position=\\\"floating\\\">Password</ion-label>\\n      <ion-input  readonly type=\\\"password\\\" formControlName=\\\"password\\\" [class.error1]=\\\"!profileform.controls.password.valid && profileform.controls.password.dirty\\\"></ion-input>\\n    </ion-item>\\n\\n    <ion-item no-lines *ngIf=\\\"( profileform.get('password').hasError('minlength') || profileform.get('password').hasError('maxlength') ||profileform.get('password').hasError('required') ) && profileform.get('password').touched\\\">\\n      <div class=\\\"error\\\" *ngIf=\\\"profileform.get('password').hasError('required') && profileform.get('password').touched\\\">\\n        Please input your password\\n      </div>\\n      <div class=\\\"error\\\" *ngIf=\\\"profileform.get('password').hasError('minlength') && profileform.get('password').touched\\\">\\n        Minimum 6 characters\\n      </div>\\n      <div class=\\\"error\\\" *ngIf=\\\"profileform.get('password').hasError('maxlength') && profileform.get('password').touched\\\">\\n        Maximum 12 characters\\n      </div>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label  position=\\\"floating\\\">Membership Number</ion-label>\\n      <ion-input type=\\\"text\\\" readonly formControlName=\\\"loyalitNumber\\\" [class.error1]=\\\"!profileform.controls.loyalitNumber.valid && profileform.controls.loyalitNumber.dirty\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n        <ion-label  position=\\\"floating\\\">Reward Points</ion-label>\\n        <ion-input type=\\\"text\\\" readonly formControlName=\\\"points\\\" [class.error1]=\\\"!profileform.controls.points.valid && profileform.controls.points.dirty\\\"></ion-input>\\n      </ion-item>\\n    <!-- <ion-button  type=\\\"submit\\\" size=\\\"block\\\" color=\\\"primary\\\" [disabled]=\\\"profileform.invalid\\\">UPDATE</ion-button> -->\\n</form>\\n<ion-button  size=\\\"block\\\" color=\\\"danger\\\" (click)=\\\"logout()\\\">LOGOUT</ion-button>\\n</ion-content>\\n\"","module.exports = \"ion-input[readonly] {\\n  background-color: #ddd; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormGroup, FormControl, ReactiveFormsModule   } from '@angular/forms';\nimport {ProfileService} from '../service/profile.service';\nimport {AuthnticationService} from '../service/authntication.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-profiles',\n  templateUrl: './profiles.page.html',\n  styleUrls: ['./profiles.page.scss'],\n})\nexport class ProfilesPage implements OnInit {\n  public profiles:any;\n  profileform: FormGroup;\n  constructor(private profile:ProfileService, private auth:AuthnticationService,  private route:Router) { \n  }\n\n  ngOnInit() {\n    this.profileform = new FormGroup({\n      \n      firstname: new FormControl('', [Validators.required, Validators.pattern('[a-zA-Z ]*'), Validators.minLength(4), Validators.maxLength(30)]),\n      lastname: new FormControl('', [Validators.required, Validators.pattern('[a-zA-Z ]*'), Validators.minLength(4), Validators.maxLength(30)]),\n      email: new FormControl('', [Validators.required, Validators.pattern('^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$'), Validators.minLength(4), Validators.maxLength(30)]),\n      username: new FormControl('', [Validators.required, Validators.pattern('[a-zA-Z ]*'), Validators.minLength(4), Validators.maxLength(10)]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]),\n      loyalitNumber: new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]),\n      points: new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]),\n    });\n  }\n\n  ionViewWillEnter(){\n    this.loadData();\n  }\n\n  loadData(refresher?){\n    this.profile.getProfile().subscribe(\n      value => {\n        this.profiles = value;\n        delete this.profiles._id;\n        delete this.profiles.id;\n        \n        this.profileform.setValue(this.profiles);\n        if(refresher){\n          refresher.target.complete();\n        }\n      },\n      err => {\n        console.log(err);\n        if(refresher){\n          refresher.target.complete();\n        }\n      }\n    );\n  }\n\n  profileUpdate(){\n    console.log('profile updated');\n  }\n\n  async logout(){\n    await this.auth.logout();\n    this.route.navigate(['/login']);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Storage } from '@ionic/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfileService {\n\n  constructor(public http: HttpClient,public storage: Storage) {\n  }\n\n  getProfile():  Observable<any>{\n    console.log('get profile')\n    const httpOptions = {\n      headers: new HttpHeaders({\n      'Content-Type':  'application/json'\n      })\n    };\n\n    return this.http.post(\"http://192.168.1.102:3000/application/profile\", httpOptions).pipe(map((response: Response) => response ));\n  }\n\n  getShop(lat,lng):  Observable<any>{\n    const httpOptions = {\n      headers: new HttpHeaders({\n      'Content-Type':  'application/json'\n      })\n    };\n    let location = {lat,lng};\n\n    return this.http.post(\"http://192.168.1.102:3000/application/shopnear\", location, httpOptions).pipe(map((response: Response) => response ));\n  }\n\n  getShopAll():  Observable<any>{\n    const httpOptions = {\n      headers: new HttpHeaders({\n      'Content-Type':  'application/json'\n      })\n    };\n    return this.http.post(\"http://192.168.1.102:3000/application/shop\", httpOptions).pipe(map((response: Response) => response ));\n  }\n  getShopList():  Observable<any>{\n    const httpOptions = {\n      headers: new HttpHeaders({\n      'Content-Type':  'application/json'\n      })\n    };\n    return this.http.post(\"http://192.168.1.102:3000/application/shoplist\", httpOptions).pipe(map((response: Response) => response ));\n  }\n\n  purchaseHistory():  Observable<any>{\n    const httpOptions = {\n      headers: new HttpHeaders({\n      'Content-Type':  'application/json'\n      })\n    };\n    return this.http.post(\"http://192.168.1.102:3000/application/purchaseHistory\", httpOptions).pipe(map((response: Response) => response ));\n  }\n\n  order(id):  Observable<any>{\n    const httpOptions = {\n      headers: new HttpHeaders({\n      'Content-Type':  'application/json'\n      })\n    };\n    return this.http.post(\"http://192.168.1.102:3000/application/viewOrder\", { id }, httpOptions).pipe(map((response: Response) => response ));\n  }\n\n}\n"],"sourceRoot":""}